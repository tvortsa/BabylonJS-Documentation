include includes/header.pug
include includes/banner.pug
#wrapper
    //----------------------
    //-LOGO AND BASELINE
    //----------------------
    .presentation-header
        .presentation-img
        .bigimage
            img(src='img/logos/logo-babylonjs.png')
        h1.bjs-moto 3D движок с открытым исходным кодом основанный на webGL и Javascript
    //----------------------
    //-THREE COLUMNS
    //----------------------
    .bjs-components
        .bjs-component
            h1 Easy Setup
            p
                | Не нужно ничего устанавливать на компьютер чтобы разрабатывать программы на
                | BabylonJS. Не нужно устанавливать никаких клиентов для запуска вашей программы.
                | Эту простоту вы можете увидеть в <a href="#getting-started">Getting
                | Started tutorial</a> ниже! Затем узнайте больше из обзора
                | доступного в <a href = "overviews/Documentation_Category_Map"> documentation map</a>.
        .bjs-component
            h1 WebGL
            p
                | Web Graphics Library, или WebGL, это JavaScript API созданная для
                | интерактивной компьютерной 3D и 2D графики в любом совместимом
                | web браузере, без использования каких-либо плагинов.
        .bjs-component
            h1 Javascript
            p
                | Известный так же как ECMAScript, JavaScript это динамический, прототипно-ориентированный
                | скриптовый язык, с first-class functions. Широко используется на стороне клиента (и иногда
                | даже на стороне сервера, как на это сайте!), Javascript это язык на котором основан
                | BabylonJS.

    .horizontal-separator

    //----------------------
    //-НАЧАЛО
    //----------------------
    .getting-started#getting-started
        h1 НАЧАЛО
        p.selection-toggles
            button#js-start.selection-toggle Javascript
            button#ts-start.selection-toggle Typescript
        p.
            Сперва, <a href="https://github.com/BabylonJS/Babylon.js">загрузите последнюю версию BabylonJS</a>.
            Убедитесь что ваш браузер поддерживает WebGL (Internet Explorer 11+/Firefox 4+/Google Chrome 9+/
            Opera 15+...). Затем создайте папку проекта в которую поместите последнюю версию BabylonJS и файл<code>
            index.html</code> , вот так:
        pre
            code.github.js.
                yourAwesomeProject
                    |- index.html
                    |- babylon.js
            code.github.ts.
                yourAwesomeProject
                    |- index.html
                    |- babylon.js
                    |- babylon.d.ts
        p.
            Мы будем писать код только в файле <code>index.html</code> для простоты. Документ HTML
            начинается так:
        pre
            code.html.
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                    &lt;meta http-equiv="Content-Type" content="text/html" charset="utf-8"/&gt;
                    &lt;title&gt;Babylon - Getting Started&lt;/title&gt;
                    &lt;!-- ссылка на последнюю версию babylon --&gt;
                    &lt;script src="babylon.2.5.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                &lt;body&gt;
                    &lt;canvas id="renderCanvas"&gt;&lt;/canvas&gt;
                &lt;/body&gt;
                &lt;/html&gt;
        p.
            Как видите, мы вставили элемент<code>&lt;body&gt;</code> a <code>&lt;canvas&gt;</code> . Этот
            <code>&lt;canvas&gt;</code> элемент - и является тем местом где происходит рендеринг 3D.
            Добавим немного стилей <code>&lt;head&gt;</code>:
        pre
            code.html.
                &lt;style&gt;
                    html, body {
                        overflow: hidden;
                        width   : 100%;
                        height  : 100%;
                        margin  : 0;
                        padding : 0;
                    }

                    #renderCanvas {
                        width   : 100%;
                        height  : 100%;
                        touch-action: none;
                    }
                &lt;/style&gt;
        p.js.
            Теперь напишем необходимый для демонстрации JS код. Для начала вставим в конец вашего &lt;body&gt;:
        pre.js
            code.html.js.
                &lt;script&gt;
                    window.addEventListener('DOMContentLoaded', function() {
                        // разместите свой код здесь
                    });
                &lt;/script&gt;
        p.js.
            Как видите, мы обернули javascript код в обработчик события <code>DOMContentLoaded</code>, чтобы быть
            уверенными в том что весь DOM загружен прежде чем мы что-то станем делать.
            Весь остальной код мы будем размещать внутри этой обертки.
        p.js.
            Мы приведем базовый код для всех приложений BabylonJS, создание сцены, вставка и отображение каркасов
            (две базовые формы: сфера и поверхность земли).
        p.js.
            Шаг первый - получить ссылку на элемент canvas из нашего HTML документа:
        pre.js
            code.javascript.js.
                var canvas = document.getElementById('renderCanvas');
        p.js.
            Затем, загружаем движок Babylon 3D:
        pre.js
            code.javascript.js.
                var engine = new BABYLON.Engine(canvas, true);
        p.js.
            Затем создаем нашу сцену (scene). Чтобы ваша программа была совместимой с Babylon.js Playground,
            рекомендуем вставить здесь функцию "createScene". За кадром она создает объект Babylon Scene
            , <code>createScene()</code> здесь добавим все что необходимо сцене: камеру, свет,
            и два базовых меша (сфера и земля).
        pre.js
            code.javascript.js.
                var createScene = function() {
                    // создаем базовый объект сцены - BJS Scene 
                    var scene = new BABYLON.Scene(engine);

                    // создаем камеру FreeCamera, и настраиваем ее положение (x:0, y:5, z:-10)
                    var camera = new BABYLON.FreeCamera('camera1', new BABYLON.Vector3(0, 5,-10), scene);

                    // нацеливаем камеру на нулевую точку сцены (scene origin)
                    camera.setTarget(BABYLON.Vector3.Zero());

                    // подключаем камеру к canvas
                    camera.attachControl(canvas, false);

                    // создаем базовый свет, нацеленный в 0,1,0 - означает, в небо
                    var light = new BABYLON.HemisphericLight('light1', new BABYLON.Vector3(0,1,0), scene);

                    // создаем встроенную форму "sphere" ; ее конструктор принимает 4 параметра: name, subdivisions, radius, scene
                    var sphere = BABYLON.Mesh.CreateSphere('sphere1', 16, 2, scene);

                    // приподнимаем сферу на половину ее высоты
                    sphere.position.y = 1;

                    // создаем встроенную форму "ground" ; ее конструктор принимает 5 параметров: name, width, height, subdivisions и scene
                    var ground = BABYLON.Mesh.CreateGround('ground1', 6, 6, 2, scene);

                    // возвращаем созданную сцену
                    return scene;
                }
        p.js.
            Итак наша функция <code>createScene()</code> готова, теперь остается только вызвать ее:
        pre.js
            code.javascript.js.
                var scene = createScene();
        p.js.
            Следующие три строки javascript очень важны, поскольку регистрируют цикл рендеринга на постоянно повторяющийся рендер
            сцены на холсте:
        pre.js
            code.javascript.js.
                engine.runRenderLoop(function() {
                    scene.render();
                });
        p.js.
            Наконец, вы должны реализовать немного canvas/window обработчик события изменения размера, примерно так:
        pre.js
            code.javascript.js.
                window.addEventListener('resize', function() {
                    engine.resize();
                });
        p.ts.
           йТеперь мы напишем необходимые Typescript код для запуска нашего демо.
            Начнем с, создания нового файла <code>game.ts</code> с классом <code>Game</code>
            конструктором <code>constructor</code> , и двумя методами <code>createScene<c/ode>
            и <code>animate</code>. Добавим Event Listener для <code>DOMContentLoaded</code>
            который будет инстанцировать <code>Game</code>, создавать сцену и запускать анимацию :
        pre.ts
            code.javascript.ts.
                class Game {
                  constructor(canvasElement : string) {
                  }

                  createScene() : void {
                  }

                  animate() : void {
                  }
                }

                window.addEventListener('DOMContentLoaded', () => {
                  // Создаем game используя 'renderCanvas'
                  let game = new Game('renderCanvas');

                  // Создаем сцену
                  game.createScene();

                  // стартуем анимацию
                  game.animate();
                });
        p.ts.
            Затем мы добавим переменные экземпляра, необходимые для нашей игры. Все они
            должны быть приватными, согласно кодингу в Babylon js <a href="http://doc.babylonjs.com/generals/Approved_Naming_Conventions">
            coding guidelines</a>, они все начинаются с нижнего подчеркивания :
        pre.ts.
            code.javascript.ts.
                class Game {
                    private _canvas: HTMLCanvasElement;
                    private _engine: BABYLON.Engine;
                    private _scene: BABYLON.Scene;
                    private _camera: BABYLON.FreeCamera;
                    private _light: BABYLON.Light;

                    ...
                }
        p.ts.
            Теперь реализуем <code>constructor</code>, ему передается имя элемента canvas
            а конструкторы не имеют возвращаемых значений. Код использует параметр <code>canvasElement</code>
            для создания canvas а затем создания engine :
        pre.ts.
            constructor(canvasElement : string) {
              // Создание canvas и engine
              this._canvas = <HTMLCanvasElement>document.getElementById(canvasElement);
              this._engine = new BABYLON.Engine(this._canvas, true);
            }
        p.ts.
            Затем реализуем <code>createScene</code>, которые не принимает параметров и ничего не возвращает
            поэтому его вид <code>void</code>. В комментариях кода подробно описаны его действия.
        pre.ts.
            createScene() : void {
               // создаем базовый объект сцены BJS
               this._scene = new BABYLON.Scene(this._engine);

               // создаем FreeCamera, и задаем ей позицию (x:0, y:5, z:-10)
               this._camera = new BABYLON.FreeCamera('camera1', new BABYLON.Vector3(0, 5,-10), this._scene);

               // нацеливаем камеру на scene origin
               this._camera.setTarget(BABYLON.Vector3.Zero());

               // присоединяем камеру к canvas
               this._camera.attachControl(this._canvas, false);

               // создаем basic light, aiming 0,1,0 - meaning, to the sky
               this._light = new BABYLON.HemisphericLight('light1', new BABYLON.Vector3(0,1,0), this._scene);

               // создаем встроенную форму "sphere"; с 16 сегментами и диаметром 2
               let sphere = BABYLON.MeshBuilder.CreateSphere('sphere1',
                                        {segments: 16, diameter: 2}, this._scene);

               // перемещаем сферу вверх на 1/2 ее высоты
               sphere.position.y = 1;

               // создаем встроенную форму "ground"
               let ground = BABYLON.MeshBuilder.CreateGround('ground1',
                                        {width: 6, height: 6, subdivisions: 2}, this._scene);
            }
        p.ts.
            ЗАтем реализуем <code>animate</code>, который также ничего не принимает и не возвращает.
            Эта процедура запускает цикл рендеринга и добавляет слушатель события изменения размера :
        pre.ts.
            animate() : void {
              // запуск цикла рендера
              this._engine.runRenderLoop(() => {
                  this._scene.render();
              });

              // обработчик события изменения размера canvas/окна
              window.addEventListener('resize', () => {
                  this._engine.resize();
              });
            }
        p.ts.
            НАконец, сохраняем файл <code>game.ts</code> и добавляем ссылку на <code>game.js</code>,
            whкоторая будет сгенерирована из <code>game.ts</code>, в ваш index.html :
        pre.ts.
            code.html.
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                    &lt;script src="game.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                &lt;/html&gt;
        p.ts.
            Папка вашего проекта теперь должна содержать:
        pre.ts
            code.github.ts.
                yourAwesomeProject
                    |- index.html
                    |- game.ts
                    |- babylon.2.3.js
                    |- babylon.2.3.d.ts
        p.ts.
            Компилируем <code>game.ts</code> который должен вывести <code>game.js</code>:
        pre.ts
            code.github.ts.
                tsc game.ts babylon.2.3.d.ts
        p.ts.
            Теперь вы должны видеть <code>game.js</code> в аппке вашего проекта:
        pre.ts
            code.github.ts.
                yourAwesomeProject
                    |- index.html
                    |- game.js
                    |- game.ts
                    |- babylon.2.3.js
                    |- babylon.2.3.d.ts
        p.
            Это все! Сохраните ваши файлы и откройте <code>index.html</code> в браузере. Вы должны увидеть следующее:
            
        div.bigimage
            a(href="http://www.babylonjs-playground.com/#12S23Y", target="_blank")
                img(src='img/getting_started_demo.jpg').demo-img
        p.
            You can click on the image above to see a live demo on the BabylonJS playground.
        p.
            If you have any trouble with this demonstration, feel free to copy-paste the following code in your <code>
            index.html</code> file:
        pre
            code.html.js.
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                    &lt;meta http-equiv="Content-Type" content="text/html" charset="utf-8"/&gt;
                    &lt;title&gt;Babylon - Getting Started&lt;/title&gt;
                    &lt;!--- link to the last version of babylon ---&gt;
                    &lt;script src="babylon.2.3.debug.js"&gt;&lt;/script&gt;
                    &lt;style&gt;
                        html, body {
                            overflow: hidden;
                            width   : 100%;
                            height  : 100%;
                            margin  : 0;
                            padding : 0;
                        }

                        #renderCanvas {
                            width   : 100%;
                            height  : 100%;
                            touch-action: none;
                        }
                    &lt;/style&gt;
                &lt;/head&gt;
                &lt;body&gt;
                    &lt;canvas id="renderCanvas"&gt;&lt;/canvas&gt;
                    &lt;script&gt;
                        window.addEventListener('DOMContentLoaded', function(){
                            // get the canvas DOM element
                            var canvas = document.getElementById('renderCanvas');

                            // load the 3D engine
                            var engine = new BABYLON.Engine(canvas, true);

                            // createScene function that creates and return the scene
                            var createScene = function(){
                                // create a basic BJS Scene object
                                var scene = new BABYLON.Scene(engine);

                                // create a FreeCamera, and set its position to (x:0, y:5, z:-10)
                                var camera = new BABYLON.FreeCamera('camera1', new BABYLON.Vector3(0, 5,-10), scene);

                                // target the camera to scene origin
                                camera.setTarget(BABYLON.Vector3.Zero());

                                // attach the camera to the canvas
                                camera.attachControl(canvas, false);

                                // create a basic light, aiming 0,1,0 - meaning, to the sky
                                var light = new BABYLON.HemisphericLight('light1', new BABYLON.Vector3(0,1,0), scene);

                                // create a built-in "sphere" shape; its constructor takes 5 params: name, width, depth, subdivisions, scene
                                var sphere = BABYLON.Mesh.CreateSphere('sphere1', 16, 2, scene);

                                // move the sphere upward 1/2 of its height
                                sphere.position.y = 1;

                                // create a built-in "ground" shape; its constructor takes the same 5 params as the sphere's one
                                var ground = BABYLON.Mesh.CreateGround('ground1', 6, 6, 2, scene);

                                // return the created scene
                                return scene;
                            }

                            // call the createScene function
                            var scene = createScene();

                            // run the render loop
                            engine.runRenderLoop(function(){
                                scene.render();
                            });

                            // the canvas/window resize event handler
                            window.addEventListener('resize', function(){
                                engine.resize();
                            });
                        });
                    &lt;/script&gt;
                &lt;/body&gt;
                &lt;/html&gt;
            code.html.ts.
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                    &lt;meta http-equiv="Content-Type" content="text/html" charset="utf-8"/&gt;
                    &lt;title&gt;Babylon - Getting Started&lt;/title&gt;
                    &lt;!--- link to the last version of babylon ---&gt;
                    &lt;script src="babylon.2.3.debug.js"&gt;&lt;/script&gt;
                    &lt;script src="game.js"&gt;&lt;/script&gt;
                    &lt;style&gt;
                        html, body {
                            overflow: hidden;
                            width   : 100%;
                            height  : 100%;
                            margin  : 0;
                            padding : 0;
                        }

                        #renderCanvas {
                            width   : 100%;
                            height  : 100%;
                            touch-action: none;
                        }
                    &lt;/style&gt;
                &lt;/head&gt;
                &lt;body&gt;
                    &lt;canvas id="renderCanvas"&gt;&lt;/canvas&gt;
                &lt;/body&gt;
                &lt;/html&gt;
        p.ts.
            Then, feel free to copy-paste the following code in your <code>game.ts</code> file:
        pre.ts.
            class Game {
              private _canvas: HTMLCanvasElement;
              private _engine: BABYLON.Engine;
              private _scene: BABYLON.Scene;
              private _camera: BABYLON.FreeCamera;
              private _light: BABYLON.Light;

              constructor(canvasElement : string) {
                // Create canvas and engine
                this._canvas = <HTMLCanvasElement>document.getElementById(canvasElement);
                this._engine = new BABYLON.Engine(this._canvas, true);
              }

              createScene() : void {
                  // create a basic BJS Scene object
                  this._scene = new BABYLON.Scene(this._engine);

                  // create a FreeCamera, and set its position to (x:0, y:5, z:-10)
                  this._camera = new BABYLON.FreeCamera('camera1', new BABYLON.Vector3(0, 5,-10), this._scene);

                  // target the camera to scene origin
                  this._camera.setTarget(BABYLON.Vector3.Zero());

                  // attach the camera to the canvas
                  this._camera.attachControl(this._canvas, false);

                  // create a basic light, aiming 0,1,0 - meaning, to the sky
                  this._light = new BABYLON.HemisphericLight('light1', new BABYLON.Vector3(0,1,0), this._scene);

                  // create a built-in "sphere" shape; with 16 segments and diameter of 2
                  let sphere = BABYLON.MeshBuilder.CreateSphere('sphere1',
                                        {segments: 16, diameter: 2}, this._scene);

                  // move the sphere upward 1/2 of its height
                  sphere.position.y = 1;

                  // create a built-in "ground" shape
                  let ground = BABYLON.MeshBuilder.CreateGround('ground1',
                                        {width: 6, height: 6, subdivisions: 2}, this._scene);
              }

              animate() : void {
                // run the render loop
                this._engine.runRenderLoop(() => {
                    this._scene.render();
                });

                // the canvas/window resize event handler
                window.addEventListener('resize', () => {
                    this._engine.resize();
                });
              }
            }

            window.addEventListener('DOMContentLoaded', () => {
              // Create the game using the 'renderCanvas'
              let game = new Game('renderCanvas');

              // Create the scene
              game.createScene();

              // start animation
              game.animate();
            });
    // HIGHLIGHT JS
    script(src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.6/highlight.min.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.6/languages/javascript.min.js')
    script.
        hljs.initHighlightingOnLoad();
    script.
        var selectedLanguage = 'js';

        document.getElementById('js-start').addEventListener('click', function() {
            selectedLanguage = 'js';

            var hiddenElements = document.getElementsByClassName('ts');
            var visibleElements = document.getElementsByClassName('js');

            for (var i = 0; i < hiddenElements.length; i++) {
                hiddenElements[i].style.display = 'none';
            }
            for (var i = 0; i < visibleElements.length; i++) {
                visibleElements[i].style.display = '';
            }

            document.getElementById('js-start').className += ' toggle-selected';
            document.getElementById('ts-start').className = document.getElementById('ts-start').className.replace(/\btoggle-selected\b/g,'');
        });

        document.getElementById('ts-start').addEventListener('click', function() {
            selectedLanguage = 'ts';

            var hiddenElements = document.getElementsByClassName('js');
            var visibleElements = document.getElementsByClassName('ts');

            for (var i = 0; i < hiddenElements.length; i++) {
                hiddenElements[i].style.display = 'none';
            }
            for (var i = 0; i < visibleElements.length; i++) {
                visibleElements[i].style.display = '';
            }

            document.getElementById('js-start').className = document.getElementById('js-start').className.replace(/\btoggle-selected\b/g,'');
            document.getElementById('ts-start').className += ' toggle-selected';
        });

        var hiddenElements = document.getElementsByClassName('ts');
        var visibleElements = document.getElementsByClassName('js');

        for (var i = 0; i < hiddenElements.length; i++) {
            hiddenElements[i].style.display = 'none';
        }
        for (var i = 0; i < visibleElements.length; i++) {
            visibleElements[i].style.display = '';
        }

        document.getElementById('js-start').className += ' toggle-selected';
        document.getElementById('ts-start').className = document.getElementById('ts-start').className.replace(/\btoggle-selected\b/g,'');
    style.
        .selection-toggles {
            text-align: center;
        }
        .selection-toggle {
            background-color: #f8eec7;
            color: #ffffff;
            font-size: 20px;
            padding: 10px 20px 10px 20px;
            text-decoration: none;
            border: none;
        }
        .toggle-selected {
            background-color: #fc4349;
        }

include includes/footer.pug
